1. 堆是一种数据结构，（二叉）堆是一个数组，可以被看成一个近似的完全二叉树，除了最底层外，该树是完全充满的，而且是从左向右填充；
   表示堆的数组 A 包括两个属性：A.length 给出数组元素的个数，A.heap-size 表示有多少个堆元素存储在该数组中。

2. 堆的性质：树的根结点为A[1]，这样给定一个结点的下标i, 容易计算得到它的父结点、左孩子和右孩子。

    def Parent(i):
      return ⌊i/2⌋  
      # i >> 1

    def Left(i):
      return 2*i
      # 快速计算得到2i的方式，i << 1

    def Right(i):
      return 2*i + 1   
      # i << 1 + 1

3. 二叉堆分为：（1）最大堆：堆的最大元素存放在根结点中，且在任一子树中，该子树所包含的所有结点的值都不大于该子树根结点的值；
              （2）最小堆：堆的最小元素存放在根结点中，且在任一子树中，该子树所包含的所有结点的值都不小于该子树根结点的值。
   
4. 堆的应用：堆排序算法中使用的是最大堆；最小堆常用于构造优先队列。

5. 堆的高度：堆的高度可定义根结点的高度。一个包含 n 个元素可被看做一棵完全二叉树，那么该堆的高度是θ(lgn)
            堆结构上的一些基本操作的运行时间至多与树的高度成正比，即时间复杂度为O(lgn)
            
习题 6.1-1: 在高度为 h 的堆中，元素个数最多和最少分别是多少？
答：当堆为满二叉树结构时，元素个数最多为 1 + 2 + 4 + 8 + ... + 2^h = 2^(h+1) - 1
    当树深为h的层中只有一个结点时，元素个数最少为 1+2+4+8+...+2^(h-1) + 1 = 2^h
    
习题6.1-2：证明：含 n 个元素的堆的高度为⌊lgn⌋
答：由6.1-1可得，n ∈ (2^h, 2^(h+1) - 1)，因此可得 h = ⌊lgn⌋

习题6.1-3: 证明：在最大堆的任一子树中，该子树所包含的最大元素在该子树的根结点上

习题6.1-4: 假设一个最大堆的所有元素都不相同，那么该堆的最小元素应该位于哪里？
答：最大堆的最小元素在某一个叶子结点上，即索引为 ⌊n/2⌋+1...n 的某个结点上，也就是堆数组的后一半中

习题6.1-5：一个已排好序的数组是一个最小堆吗？
答：是的

习题6.1-6：值为<23, 17, 14, 6, 13, 10, 1, 5, 7, 12>的数组是一个最大堆吗？
答：不是

习题6.1-7：证明：当用数组表示存储 n 个元素的堆时，叶结点下标分别是 ⌊n/2⌋+1, ⌊n/2⌋+2, ..., n
答：Left(⌊n/2⌋+1) = 2 * (⌊n/2⌋+1) > 2 * (n/2-1+1) = n，其左孩子索引超出了堆的长度，因为该结点没有孩子，是个叶子结点。
    一个大小为n的堆的叶子结点数量为⌈n/2⌉
