# 二叉搜索树的删除

# 从二叉搜索树 T 中删除一个结点 z 可分为三种情况：
#（1）如果 z 没有孩子结点，直接将其删除，并修改它的父结点，用 None 作为孩子来替换 z
#（2）如果 z 只有一个孩子，那么将这个孩子提升到树中 z 的位置上，并修改 z 的父结点，用 z 的孩子来替换 z
#（3）如果 z 有两个孩子，那么找 z 的后继 y（一定在 z 的右子树中），并让 y 占据树中 z 的位置。z 的原来右子树部分称为 y 的新的右子树，并且 z 的左子树
#     成为 y 的新的左子树，这种情况略微麻烦，因为还与 y 是否为 z 的右孩子相关。

# 代码实现过程：
#（1）如果 z 没有左孩子，那么用其右孩子来替换 z，右孩子可以是 None 或不是。当 z 的右孩子也为 None 的时候，这种情况归为 z 没有孩子结点的情形；
#     当右孩子非 None 的时候，这种情况就是 z 只有一个孩子结点且该孩子为右孩子的情形；
#（2）如果 z 仅有一个孩子且为左孩子，那么用其左孩子来替换 z；
#（3）否则，z 既有一个左孩子又有一个右孩子。我们需要查找 z 的后继 y，这个后继位于右子树中且没有左孩子（见习题12.2-5）。
#     现在需要将 y 移出原来的位置替换树中的 z。
#     A. 如果 y 是 z 的右孩子，那么用 y 替换 z，并仅留下 y 的右孩子；
#     B. 否则 y 位于 z 的右子树中但并不是 z 的右孩子，在这种去情况下，先用 y 的右孩子替换 y，再用 y 替换 z。


class Tree:
  def __init__(self, val):
    self.val = val
    self.left = None
    self.right = None
    self.parent = None


def Tree_Delete(root, z):
  
    
    
